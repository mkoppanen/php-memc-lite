diff --git a/fastlz/fastlz.c b/fastlz/fastlz.c
index 3c9d6f6..8114ff6 100644
--- a/fastlz/fastlz.c
+++ b/fastlz/fastlz.c
@@ -24,6 +24,8 @@
   THE SOFTWARE.
 */
 
+#include "fastlz.h"
+
 #if !defined(FASTLZ__COMPRESSOR) && !defined(FASTLZ_DECOMPRESSOR)
 
 /*
@@ -82,9 +84,9 @@ typedef unsigned short flzuint16;
 typedef unsigned int   flzuint32;
 
 /* prototypes */
-int fastlz_compress(const void* input, int length, void* output);
-int fastlz_compress_level(int level, const void* input, int length, void* output);
-int fastlz_decompress(const void* input, int length, void* output, int maxout);
+//int fastlz_compress(const void* input, int length, void* output);
+//int fastlz_compress_level(int level, const void* input, int length, void* output);
+//int fastlz_decompress(const void* input, int length, void* output, int maxout);
 
 #define MAX_COPY       32
 #define MAX_LEN       264  /* 256 + 8 */
@@ -127,7 +129,7 @@ static FASTLZ_INLINE int FASTLZ_COMPRESSOR(const void* input, int length, void*
 static FASTLZ_INLINE int FASTLZ_DECOMPRESSOR(const void* input, int length, void* output, int maxout);
 #include "fastlz.c"
 
-int fastlz_compress(const void* input, int length, void* output)
+int FASTLZ_FUNCTION_NAME(FASTLZ_FUNCTION_PREFIX, fastlz_compress)(const void* input, int length, void* output)
 {
   /* for short block, choose fastlz1 */
   if(length < 65536)
@@ -137,7 +139,7 @@ int fastlz_compress(const void* input, int length, void* output)
   return fastlz2_compress(input, length, output);
 }
 
-int fastlz_decompress(const void* input, int length, void* output, int maxout)
+int FASTLZ_FUNCTION_NAME(FASTLZ_FUNCTION_PREFIX, fastlz_decompress)(const void* input, int length, void* output, int maxout)
 {
   /* magic identifier for compression level */
   int level = ((*(const flzuint8*)input) >> 5) + 1;
@@ -151,7 +153,7 @@ int fastlz_decompress(const void* input, int length, void* output, int maxout)
   return 0;
 }
 
-int fastlz_compress_level(int level, const void* input, int length, void* output)
+int FASTLZ_FUNCTION_NAME(FASTLZ_FUNCTION_PREFIX, fastlz_compress_level)(int level, const void* input, int length, void* output)
 {
   if(level == 1)
     return fastlz1_compress(input, length, output);
diff --git a/fastlz/fastlz.h b/fastlz/fastlz.h
index f87bc7b..54fd7ad 100644
--- a/fastlz/fastlz.h
+++ b/fastlz/fastlz.h
@@ -39,6 +39,13 @@
 extern "C" {
 #endif
 
+#ifndef FASTLZ_FUNCTION_PREFIX
+#  define FASTLZ_FUNCTION_PREFIX
+#endif
+
+#define FASTLZ_TOKEN_PASTE(prefix, name) prefix ## name
+#define FASTLZ_FUNCTION_NAME(prefix, name) FASTLZ_TOKEN_PASTE(prefix, name)
+
 /**
   Compress a block of data in the input buffer and returns the size of 
   compressed block. The size of input buffer is specified by length. The 
@@ -53,7 +60,7 @@ extern "C" {
   The input buffer and the output buffer can not overlap.
 */
 
-int fastlz_compress(const void* input, int length, void* output);
+int FASTLZ_FUNCTION_NAME(FASTLZ_FUNCTION_PREFIX, fastlz_compress)(const void* input, int length, void* output);
 
 /**
   Decompress a block of compressed data and returns the size of the 
@@ -67,7 +74,7 @@ int fastlz_compress(const void* input, int length, void* output);
   more than what is specified in maxout.
  */
 
-int fastlz_decompress(const void* input, int length, void* output, int maxout); 
+int FASTLZ_FUNCTION_NAME(FASTLZ_FUNCTION_PREFIX, fastlz_decompress)(const void* input, int length, void* output, int maxout); 
 
 /**
   Compress a block of data in the input buffer and returns the size of 
@@ -91,7 +98,7 @@ int fastlz_decompress(const void* input, int length, void* output, int maxout);
   decompressed using the function fastlz_decompress above.
 */  
 
-int fastlz_compress_level(int level, const void* input, int length, void* output);
+int FASTLZ_FUNCTION_NAME(FASTLZ_FUNCTION_PREFIX, fastlz_compress_level)(int level, const void* input, int length, void* output);
 
 #if defined (__cplusplus)
 }
diff --git a/fastlz/fastlz_func_prefix.patch b/fastlz/fastlz_func_prefix.patch
index 0ca374b..358f9d1 100644
--- a/fastlz/fastlz_func_prefix.patch
+++ b/fastlz/fastlz_func_prefix.patch
@@ -1,85 +0,0 @@
-diff --git a/fastlz/fastlz.c b/fastlz/fastlz.c
-index 3c9d6f6..72a8561 100644
---- a/fastlz/fastlz.c
-+++ b/fastlz/fastlz.c
-@@ -24,6 +24,8 @@
-   THE SOFTWARE.
- */
- 
-+#include "fastlz.h"
-+
- #if !defined(FASTLZ__COMPRESSOR) && !defined(FASTLZ_DECOMPRESSOR)
- 
- /*
-@@ -127,7 +129,7 @@ static FASTLZ_INLINE int FASTLZ_COMPRESSOR(const void* input, int length, void*
- static FASTLZ_INLINE int FASTLZ_DECOMPRESSOR(const void* input, int length, void* output, int maxout);
- #include "fastlz.c"
- 
--int fastlz_compress(const void* input, int length, void* output)
-+int FASTLZ_FUNCTION_NAME(FASTLZ_FUNCTION_PREFIX, fastlz_compress)(const void* input, int length, void* output)
- {
-   /* for short block, choose fastlz1 */
-   if(length < 65536)
-@@ -137,7 +139,7 @@ int fastlz_compress(const void* input, int length, void* output)
-   return fastlz2_compress(input, length, output);
- }
- 
--int fastlz_decompress(const void* input, int length, void* output, int maxout)
-+int FASTLZ_FUNCTION_NAME(FASTLZ_FUNCTION_PREFIX, fastlz_decompress)(const void* input, int length, void* output, int maxout)
- {
-   /* magic identifier for compression level */
-   int level = ((*(const flzuint8*)input) >> 5) + 1;
-@@ -151,7 +153,7 @@ int fastlz_decompress(const void* input, int length, void* output, int maxout)
-   return 0;
- }
- 
--int fastlz_compress_level(int level, const void* input, int length, void* output)
-+int FASTLZ_FUNCTION_NAME(FASTLZ_FUNCTION_PREFIX, fastlz_compress_level)(int level, const void* input, int length, void* output)
- {
-   if(level == 1)
-     return fastlz1_compress(input, length, output);
-diff --git a/fastlz/fastlz.h b/fastlz/fastlz.h
-index f87bc7b..54fd7ad 100644
---- a/fastlz/fastlz.h
-+++ b/fastlz/fastlz.h
-@@ -39,6 +39,13 @@
- extern "C" {
- #endif
- 
-+#ifndef FASTLZ_FUNCTION_PREFIX
-+#  define FASTLZ_FUNCTION_PREFIX
-+#endif
-+
-+#define FASTLZ_TOKEN_PASTE(prefix, name) prefix ## name
-+#define FASTLZ_FUNCTION_NAME(prefix, name) FASTLZ_TOKEN_PASTE(prefix, name)
-+
- /**
-   Compress a block of data in the input buffer and returns the size of 
-   compressed block. The size of input buffer is specified by length. The 
-@@ -53,7 +60,7 @@ extern "C" {
-   The input buffer and the output buffer can not overlap.
- */
- 
--int fastlz_compress(const void* input, int length, void* output);
-+int FASTLZ_FUNCTION_NAME(FASTLZ_FUNCTION_PREFIX, fastlz_compress)(const void* input, int length, void* output);
- 
- /**
-   Decompress a block of compressed data and returns the size of the 
-@@ -67,7 +74,7 @@ int fastlz_compress(const void* input, int length, void* output);
-   more than what is specified in maxout.
-  */
- 
--int fastlz_decompress(const void* input, int length, void* output, int maxout); 
-+int FASTLZ_FUNCTION_NAME(FASTLZ_FUNCTION_PREFIX, fastlz_decompress)(const void* input, int length, void* output, int maxout); 
- 
- /**
-   Compress a block of data in the input buffer and returns the size of 
-@@ -91,7 +98,7 @@ int fastlz_decompress(const void* input, int length, void* output, int maxout);
-   decompressed using the function fastlz_decompress above.
- */  
- 
--int fastlz_compress_level(int level, const void* input, int length, void* output);
-+int FASTLZ_FUNCTION_NAME(FASTLZ_FUNCTION_PREFIX, fastlz_compress_level)(int level, const void* input, int length, void* output);
- 
- #if defined (__cplusplus)
- }
